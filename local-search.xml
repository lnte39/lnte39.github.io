<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>学习笔记：PHP-mysql-2021留档</title>
    <link href="/2025/06/28/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9APHP-mysql-2021%E7%95%99%E6%A1%A3/"/>
    <url>/2025/06/28/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9APHP-mysql-2021%E7%95%99%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h1><p>基于储存介质：硬盘、内存</p><ul><li>关系型数据库：存储在磁盘中</li><li>非关系性数据库：存储在内存中</li></ul><h1 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>关系数据库是建立在__关系模型__基础上的数据库</p><h3 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h3><p>由__关系数据结构__、<strong>关系操作集合</strong>、__关系完整性约束__构成</p><ul><li>关系数据结构：数据的存储方式，是一种二维表的形式存储</li><li>关系操作集合：用来关联和管理对应存储数据的命令，SQL指令</li><li>关系完整性约束：数据内部对应的关联关系，以及数据与数据之间的对应关联关系</li></ul><p>表内约束：对应的具体列只能放对应的数据<br>表间约束：自然界各实体都是有这对应的关联关系（外键）</p><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>结构化查询语言Structured Query Language,一种编程语言。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="数据查询语言-DQL"><a href="#数据查询语言-DQL" class="headerlink" title="数据查询语言 DQL"></a>数据查询语言 DQL</h3><p>专门用于查询数据，包含__SELECT、SHOW、WHERE、HAVING、ORDER BY、GROUP BY__等</p><h3 id="数据操作语言-DML"><a href="#数据操作语言-DML" class="headerlink" title="数据操作语言 DML"></a>数据操作语言 DML</h3><p>专门运用写数据，包含__INSERT、UPDATE、DELETE__等</p><h3 id="事务处理语言-TPL"><a href="#事务处理语言-TPL" class="headerlink" title="事务处理语言 TPL"></a>事务处理语言 TPL</h3><p>专门用于事务安全处理，包含__TRANSCATION、BEGIN、COMMIT、ROLLBACK__等</p><h3 id="数据控制语言-DCL"><a href="#数据控制语言-DCL" class="headerlink" title="数据控制语言 DCL"></a>数据控制语言 DCL</h3><p>专门用于权限管理，包含__GRANT、REVOKE__</p><h3 id="数据定义语言-DDL"><a href="#数据定义语言-DDL" class="headerlink" title="数据定义语言 DDL"></a>数据定义语言 DDL</h3><p>专门用于结构管理，包含__CREATE、DROP__</p><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="启动和停止MySQL服务"><a href="#启动和停止MySQL服务" class="headerlink" title="启动和停止MySQL服务"></a>启动和停止MySQL服务</h2><p>MySQL具有服务端和客户端</p><p>服务端对应软件：Mysqld.exe</p><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><ul><li>Net start 服务(mysql)：开启服务</li><li>Net stop 服务(mysql)：关闭服务</li></ul><h3 id="用windows服务启动"><a href="#用windows服务启动" class="headerlink" title="用windows服务启动"></a>用windows服务启动</h3><p>略</p><h2 id="登录和退出MySQL系统"><a href="#登录和退出MySQL系统" class="headerlink" title="登录和退出MySQL系统"></a>登录和退出MySQL系统</h2><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><ol><li>找到mysql.exe（如果加入了环境变量可以直接用cmd控制台访问）</li><li>输入对应服务器地址：-h:host &#x2F; -h[IP地址&#x2F;域名]</li><li>输服务器中Mysql监听的端口：-P:port</li><li>输入用户名：-u:username(默认为root)</li><li>输入密码：-p:password(默认为root)</li></ol><p>连接认证基本语法：Mysql.exe&#x2F;mysql -hhost -Pport -uroot -proot</p><h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><p>使用SQL提供的指令</p><ul><li>exit;</li><li>\q</li><li>Quit;</li></ul><h2 id="MySQL服务端架构"><a href="#MySQL服务端架构" class="headerlink" title="MySQL服务端架构"></a>MySQL服务端架构</h2><p>MySQL服务端由以下几层构成：</p><ol><li>数据库管理系统（最外层）：DBMS，专门管理服务器端的所有内容</li><li>数据库（第二层）：DB，专门用于存储具体实体的数据（可以有很多个）</li><li>二维数据表（第三层）：Table，专门用于存储具体实体的数据</li><li>字段（第四层）：Field，具体存储某种类型的数据（实际存储单元）</li></ol><h1 id="数据库基本操作"><a href="#数据库基本操作" class="headerlink" title="数据库基本操作"></a>数据库基本操作</h1><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>基本语法：create database 数据库名字 [库选项];</p><p>库选项：数据库相关属性</p><p> 字符集：charset 字符集，代表着当前数据库下的所有表存储的数据默认指定的字符集</p><p> 校对集：collate 校对集</p><h2 id="显示数据库"><a href="#显示数据库" class="headerlink" title="显示数据库"></a>显示数据库</h2><p>显示所有数据库：show databases；</p><p><img src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9APHP-mysql-2021%E7%95%99%E6%A1%A3/mysqldatabaes.png" alt="mysqldatabaes"></p><h2 id="显示部分数据库"><a href="#显示部分数据库" class="headerlink" title="显示部分数据库"></a>显示部分数据库</h2><p>基本语法：show databases like ‘匹配模式’；</p><p>_：匹配当前位置单个字符</p><p>%：匹配指定位置多个字符</p><p>eg:获取以my开头的所有数据库：‘my%’</p><h2 id="显示数据库创建语句"><a href="#显示数据库创建语句" class="headerlink" title="显示数据库创建语句"></a>显示数据库创建语句</h2><p>基本语法：show create database 数据库名称；</p><h2 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h2><p>基本语法：use 数据库名称;</p><h2 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h2><p>修改数据库的库选项</p><p>基本语法：alter database 数据库名称 字符集;</p><h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><p>基本语法：drop database 数据库名称;</p><h1 id="数据表操作"><a href="#数据表操作" class="headerlink" title="数据表操作"></a>数据表操作</h1><h2 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h2><h3 id="普通数据表"><a href="#普通数据表" class="headerlink" title="普通数据表"></a>普通数据表</h3><p>基本语法：create table 表名（字段名 字段类型 [字段属性]，字段名 字段类型 [字段属性]，…） [表选项]；</p><p>数据表需挂载在数据库下：</p><ul><li>在数据表前加上数据库名用”.”连接</li><li>事先用use选择数据库</li></ul><p>表选项：与数据库类似</p><p> Engine：存储引擎，innodb&#x2F;myisam</p><p> Charset：字符集，只对表自己有效，优先级高于数据库设置</p><p> Collate：校对集</p><h3 id="复制已有表结构"><a href="#复制已有表结构" class="headerlink" title="复制已有表结构"></a>复制已有表结构</h3><p>从已经存在的表复制一份（只复制结构，数据不复制）</p><p>基本语法：create table 新表名 like 表名;</p><h2 id="显示数据表"><a href="#显示数据表" class="headerlink" title="显示数据表"></a>显示数据表</h2><h3 id="显示所有表"><a href="#显示所有表" class="headerlink" title="显示所有表"></a>显示所有表</h3><p>基本语法：show tables;</p><h3 id="匹配显示表"><a href="#匹配显示表" class="headerlink" title="匹配显示表"></a>匹配显示表</h3><p>基本语法：show tables like ’匹配模式‘</p><h3 id="显示表结构"><a href="#显示表结构" class="headerlink" title="显示表结构"></a>显示表结构</h3><p>显示表中所包含的字段信息（名字、属性、）</p><p>语法：describe 表名;</p><p> desc 表名;</p><p> show columns from 表名;</p><p><img src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9APHP-mysql-2021%E7%95%99%E6%A1%A3/table_attribute.png" alt="table_attribute"></p><h3 id="显示表创建语句"><a href="#显示表创建语句" class="headerlink" title="显示表创建语句"></a>显示表创建语句</h3><p>基本语法：show create table 表名;</p><p>Mysql中有多种语句结束符，’;‘和’\g’的效果一样，都是字段在上排，’\G’是字段在左侧竖列</p><h2 id="设置表属性"><a href="#设置表属性" class="headerlink" title="设置表属性"></a>设置表属性</h2><p>engine、charset、collate</p><p>基本语法：alter table 表名</p>]]></content>
    
    
    
    <tags>
      
      <tag>2021留档</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习笔记：PHP-基本语法-2021留档</title>
    <link href="/2025/06/28/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9APHP-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95-2021%E7%95%99%E6%A1%A3/"/>
    <url>/2025/06/28/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9APHP-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95-2021%E7%95%99%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h2><p>符号：$</p><h2 id="变量传值"><a href="#变量传值" class="headerlink" title="变量传值"></a>变量传值</h2><p>传值：a&#x3D;a&#x3D;b;<br>传址：a&#x3D;&amp;a&#x3D;&b;</p><h2 id="常量的定义"><a href="#常量的定义" class="headerlink" title="常量的定义"></a>常量的定义</h2><p>define函数定义（支持常量名更多）：define(”常量名“，常量值);<br>const定义：const 常量名&#x3D;常量值;<br>define与const定义有权限的区别<br>define函数的第三个bool参数可以使常量名有大小写区分<br>对用define定义的特殊常量名的常量，使用需采用constant函数</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h3><p>整型：int ，二进制0b开头、八进制0开头、十六进制0x开头<br>浮点型：float<br>字符串型：string<br>布尔类型：bool</p><h3 id="复合数据类型"><a href="#复合数据类型" class="headerlink" title="复合数据类型"></a>复合数据类型</h3><p>对象类型：object<br>数组类型：array</p><h3 id="特殊数据类型"><a href="#特殊数据类型" class="headerlink" title="特殊数据类型"></a>特殊数据类型</h3><p>资源类型：resource<br>空类型：NULL</p><h2 id="数据类型的转换"><a href="#数据类型的转换" class="headerlink" title="数据类型的转换"></a>数据类型的转换</h2><p>自动转换：进行算术运算自动转换<br>强制转换：”(数据类型)$变量名”,手动转换，若要转换为NULL类型需使用unset()函数，不改变数据本身类型</p><h3 id="tobool："><a href="#tobool：" class="headerlink" title="tobool："></a>tobool：</h3><p><img src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9APHP-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95-2021%E7%95%99%E6%A1%A3/tobool.png" alt="tobool"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">var_dump</span>((<span class="hljs-keyword">bool</span>) <span class="hljs-string">&quot;&quot;</span>);        <span class="hljs-comment">// bool(false)</span><br><span class="hljs-title function_ invoke__">var_dump</span>((<span class="hljs-keyword">bool</span>) <span class="hljs-number">1</span>);         <span class="hljs-comment">// bool(true)</span><br><span class="hljs-title function_ invoke__">var_dump</span>((<span class="hljs-keyword">bool</span>) -<span class="hljs-number">2</span>);        <span class="hljs-comment">// bool(true)</span><br><span class="hljs-title function_ invoke__">var_dump</span>((<span class="hljs-keyword">bool</span>) <span class="hljs-string">&quot;foo&quot;</span>);     <span class="hljs-comment">// bool(true)</span><br><span class="hljs-title function_ invoke__">var_dump</span>((<span class="hljs-keyword">bool</span>) <span class="hljs-number">2.3e5</span>);     <span class="hljs-comment">// bool(true)</span><br><span class="hljs-title function_ invoke__">var_dump</span>((<span class="hljs-keyword">bool</span>) <span class="hljs-keyword">array</span>(<span class="hljs-number">12</span>)); <span class="hljs-comment">// bool(true)</span><br><span class="hljs-title function_ invoke__">var_dump</span>((<span class="hljs-keyword">bool</span>) <span class="hljs-keyword">array</span>());   <span class="hljs-comment">// bool(false)</span><br><span class="hljs-title function_ invoke__">var_dump</span>((<span class="hljs-keyword">bool</span>) <span class="hljs-string">&quot;false&quot;</span>);   <span class="hljs-comment">// bool(true)</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="string-to-value："><a href="#string-to-value：" class="headerlink" title="string to value："></a>string to value：</h3><ul><li>以字母开头的字符串，永远为0</li><li>以数字开头的字符串，取到碰到字符为止</li></ul><h2 id="数据类型判断"><a href="#数据类型判断" class="headerlink" title="数据类型判断"></a>数据类型判断</h2><p>is_数据类型(变量名)：返回bool值,使用var_dump()函数查看结果<br>gettype(变量名)：返回数据类型的字符串<br>settype(变量名)：设定数据类型，改变数据本身的数据类型，返回bool类型<br>empty():判断值是否为“空“，非NULL<br>isset():判断是否存在<br><img src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9APHP-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95-2021%E7%95%99%E6%A1%A3/aform.png" alt="aform"></p><h2 id="几个特殊的运算符"><a href="#几个特殊的运算符" class="headerlink" title="几个特殊的运算符"></a>几个特殊的运算符</h2><h3 id="特殊的比较运算符"><a href="#特殊的比较运算符" class="headerlink" title="特殊的比较运算符"></a>特殊的比较运算符</h3><p>&#x3D;&#x3D;&#x3D;:全等于，左边与右边相同：大小及数据的类型均需要相同<br>!&#x3D;&#x3D;:不全等于，只有大小或类型不同</p><h3 id="连接运算符"><a href="#连接运算符" class="headerlink" title="连接运算符"></a>连接运算符</h3><p>.：将两个字符串连接到一起<br>.&#x3D;：复合运算，将左右内容连接到一起并赋给左边</p><h3 id="错误抑制符"><a href="#错误抑制符" class="headerlink" title="错误抑制符"></a>错误抑制符</h3><p>@：在可能出错的表达式前加上即可，作用类似于关闭错误回显</p><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><h3 id="四种形式"><a href="#四种形式" class="headerlink" title="四种形式"></a>四种形式</h3><p>Include：包含文件<br>Include_once：只包含一次文件，系统会自动判断是否已经包含过文件<br>Require：与Include相同<br>Require_once：与Include_once相同</p><ul><li>被包含的文件是单独编译的，即被包含文件有错误时，代码直到执行到include这一行才会报错。</li><li>include与require的区别：包含不到文件时报错的形式不同，include报错级别较轻，不会阻止代码运行，require会显示fatal error终止代码运行</li></ul><h3 id="文件加载路径"><a href="#文件加载路径" class="headerlink" title="文件加载路径"></a>文件加载路径</h3><p>绝对路径和相对路径加载的区别：</p><ul><li>绝对路径相对效率偏低，但是相对安全</li><li>相对路径相对效率较高，但是容易出错误</li></ul><h4 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h4><ol><li>从磁盘根目录开始</li></ol><ul><li>Windows：盘符&#x2F;路径&#x2F;PHP文件</li><li>Linux：&#x2F;路径&#x2F;PHP文件</li></ul><ol><li>从网站根目录开始</li></ol><ul><li>&#x2F;：相对于网站主机名字对应的路径</li></ul><h4 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h4><ul><li>.或者.&#x2F;：表示从当前文件夹</li><li>…&#x2F;：上一级目录</li></ul><h3 id="文件嵌套包含"><a href="#文件嵌套包含" class="headerlink" title="文件嵌套包含"></a>文件嵌套包含</h3><ul><li>注意包含时文件的工作目录变化了，使用相对路径要注意，当前目录变成了最外层的文件的工作目录。</li><li>.&#x2F;相当于当前工作目录，如.&#x2F;code&#x2F;bin在嵌套包含时就需要注意，而code&#x2F;bin则是相对于文件路径，相当于在路径前补全了文件的绝对路径，嵌套包含时不容易出问题。</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>格式：function 函数名(参数){}</p><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>格式：函数名(参数)</p><ul><li>PHP可在声明前调用函数</li></ul><h3 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h3><p>格式：function 函数名(参数 &#x3D; value){}</p><ul><li>默认值的定义时放在最左边的，不允许左边参数有默认值右边没有</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//函数调用</span><br><span class="hljs-title function_ invoke__">add</span>(<span class="hljs-variable">$a</span>,<span class="hljs-variable">$b</span>);<br><span class="hljs-comment">//函数定义</span><br>funcion <span class="hljs-title function_ invoke__">add</span>(<span class="hljs-variable">$arg1</span>,<span class="hljs-variable">$arg2</span> = <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$arg1</span>+<span class="hljs-variable">$arg2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ul><li>全局变量：只允许在全局空间中使用，不允许在函数中使用</li><li>局部变量：只允许在当前函数中使用</li><li>超全局变量（系统定义的变量）：没有访问限制<br>全局变量定义后会被系统加入到$GLOBALS[‘全局变量名’]这个超全局变量中，可在函数中调用。<br><img src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9APHP-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95-2021%E7%95%99%E6%A1%A3/globalarg.png" alt="globalarg"><br>在PHP中，其实还有一种方式，能够实现全局访问局部，同时局部也可以访问 全 局 ：global关 键 字<br>Global关键字：是一种在函数里面定义变量的一种方式</li></ul><ol><li>如果使用global定义的变量名在外部存在(全局变量),那么系统在函数内部定义的变量直接指向外部全局变量所指向的内存空间（同一个变量)</li><li>如果使用global定义的变量名在外部不存在(全局变量），系统会自动在全局空间（外部)定义一个与局部变量同名的全局变量</li></ol><h3 id="可变函数"><a href="#可变函数" class="headerlink" title="可变函数"></a>可变函数</h3><p>当有一个变量的值为一个函数的名字时，可使用变量+()来充当函数名使用，可用其实现回调函数</p><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>格式：变量名 &#x3D; function(){}；<br>调用：变量名();</p><ul><li>变量保存匿名函数，本质上是得到了一个对象(closure)</li></ul><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p><img src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9APHP-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95-2021%E7%95%99%E6%A1%A3/closure.png" alt="closure"></p><h3 id="伪类型"><a href="#伪类型" class="headerlink" title="伪类型"></a>伪类型</h3><p>Mixed：混合的，可以是多种PHP中的数据类型<br>Number：数值的，可以是任意的数值类型（整形和浮点型）</p><h2 id="几种系统函数"><a href="#几种系统函数" class="headerlink" title="几种系统函数"></a>几种系统函数</h2><h3 id="输出有关的函数"><a href="#输出有关的函数" class="headerlink" title="输出有关的函数"></a>输出有关的函数</h3><p>print():类似于echo<br>print_r():类似于var_dump()，只是不输出数据类型</p><h3 id="有关时间的函数"><a href="#有关时间的函数" class="headerlink" title="有关时间的函数"></a>有关时间的函数</h3><p>date():按照指定格式对应输出对应的时间戳,无指定时间戳则按当前时间戳，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 设定要用的默认时区。自 PHP 5.1 可用</span><br><span class="hljs-title function_ invoke__">date_default_timezone_set</span>(<span class="hljs-string">&#x27;UTC&#x27;</span>);<br><br><br><span class="hljs-comment">// 输出类似：Monday</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;l&quot;</span>);<br><br><span class="hljs-comment">// 输出类似：Monday 15th of August 2005 03:12:46 PM</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&#x27;l dS \of F Y h:i:s A&#x27;</span>);<br><br><span class="hljs-comment">// 输出：July 1, 2000 is on a Saturday</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;July 1, 2000 is on a &quot;</span> . <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;l&quot;</span>, <span class="hljs-title function_ invoke__">mktime</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2000</span>));<br><br><span class="hljs-comment">/* 在格式参数中使用常量 */</span><br><span class="hljs-comment">// 输出类似：Wed, 25 Sep 2013 15:28:57 -0700</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">date</span>(DATE_RFC2822);<br><br><span class="hljs-comment">// 输出类似：2000-07-01T00:00:00+00:00</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">date</span>(DATE_ATOM, <span class="hljs-title function_ invoke__">mktime</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2000</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9APHP-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95-2021%E7%95%99%E6%A1%A3.assets/dateformat.png" alt="dateformat"><br>time()：获取当前时间戳，即从1970.1.1 00：00：00开始到当前时间的秒数<br>microtime：获取微秒级别的时间<br>strtotime：将按照规范输入的字符串转换成对应的时间戳</p><h3 id="数学相关的函数"><a href="#数学相关的函数" class="headerlink" title="数学相关的函数"></a>数学相关的函数</h3><p>max()：指定参数中最大的值<br>min()：指定参数中最小的值<br>rand()：产生一个随机数<br>mt_rand()：与rand一样，比rand效率高<br>round()：四舍五入<br>cell()：向上取整<br>floor()：向下取整<br>pow()：求指定数字的指定指定指数次结果<br>abs()：求绝对值<br>aqrt()：求平方根</p><h3 id="有关函数的函数"><a href="#有关函数的函数" class="headerlink" title="有关函数的函数"></a>有关函数的函数</h3><p>function_exists()：判断指定的函数名字是否在内存中存在<br>func_get_arg()：在自定义函数中去获取指定数值对应的参数<br>fun_get_args()：在自定义函数中获取所有的参数（数组）<br>func_num_args()：获取当前自定义参数的参数数量</p>]]></content>
    
    
    
    <tags>
      
      <tag>2021留档</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pic</title>
    <link href="/2025/06/28/pic/"/>
    <url>/2025/06/28/pic/</url>
    
    <content type="html"><![CDATA[<p><img src="/pic/1.jpg" alt="1"></p><p><img src="/pic/2.png" alt="2"></p><p><img src="/pic/3.jpg" alt="3"></p><p><img src="/pic/4.jpg" alt="4"></p><p><img src="/pic/5.jpg" alt="5"><br>图源网络。</p>]]></content>
    
    
    
    <tags>
      
      <tag>2021留档</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自适应辛普森公式</title>
    <link href="/2025/06/28/%E8%87%AA%E9%80%82%E5%BA%94%E8%BE%9B%E6%99%AE%E6%A3%AE%E5%85%AC%E5%BC%8F/"/>
    <url>/2025/06/28/%E8%87%AA%E9%80%82%E5%BA%94%E8%BE%9B%E6%99%AE%E6%A3%AE%E5%85%AC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>按照书上自适应辛普森公式的计算流程写了一个matlab程序（实际是作业要用这个公式实在不想算了）</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%SIMPSON 自适应辛普森公式求积分</span><br><span class="hljs-comment">% up为积分上限，down为积分下限，eps为误差限</span><br><span class="hljs-built_in">i</span> = <span class="hljs-number">0</span>;<br>n = <span class="hljs-number">2</span> ^ <span class="hljs-built_in">i</span>;<br>s = <span class="hljs-number">0</span>;<br>h = (up - down);<br>s1 = h / <span class="hljs-number">6</span> * (f(up) + <span class="hljs-number">4</span> * f((up + down)/<span class="hljs-number">2</span>) + f(down));<br>output = <span class="hljs-built_in">zeros</span>(<span class="hljs-number">100</span>,<span class="hljs-number">5</span>);<br><span class="hljs-keyword">while</span> n &gt; <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span> = <span class="hljs-number">0</span>: <span class="hljs-number">1</span>: n - <span class="hljs-number">1</span><br>        s = s + (<span class="hljs-number">2</span> * f( down +(<span class="hljs-built_in">j</span> + <span class="hljs-number">1</span>/<span class="hljs-number">4</span>) * h) - f( down + ( <span class="hljs-built_in">j</span> + <span class="hljs-number">1</span>/<span class="hljs-number">2</span> ) * h) + <span class="hljs-number">2</span>* f(down + (<span class="hljs-built_in">j</span> + <span class="hljs-number">3</span>/<span class="hljs-number">4</span> )* h));<br>    <span class="hljs-keyword">end</span><br>    s2 = <span class="hljs-number">1</span>/<span class="hljs-number">2</span> * s1 + h / <span class="hljs-number">6</span> * s;<br>    output(<span class="hljs-built_in">i</span> + <span class="hljs-number">1</span>, :) = [n h s1 s2 s];<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">eps</span> &gt;= <span class="hljs-built_in">abs</span>(s2 - s1) <br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-built_in">i</span> = <span class="hljs-built_in">i</span> + <span class="hljs-number">1</span>;<br>    n = <span class="hljs-number">2</span> ^ <span class="hljs-built_in">i</span>;<br>    h = h / <span class="hljs-number">2</span>;<br>    s1 = s2; <br>    s = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">[value]</span> = <span class="hljs-title">f</span><span class="hljs-params">(x)</span></span><br>    value = <span class="hljs-number">1</span>/(<span class="hljs-number">1</span> + x ^ <span class="hljs-number">2</span>);<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>2021留档</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建站记录-2021留档</title>
    <link href="/2025/06/28/%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95-2021%E7%95%99%E6%A1%A3/"/>
    <url>/2025/06/28/%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95-2021%E7%95%99%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近感觉有很多想法没记录下来最后都想不起来了，以及总是不能坚持学习一件事情，故花了一点时间按照网上教程建立了这个小型的个人博客。一是记录一下，二是作为学习笔记存放，三是借助建站了解一下网页有关知识。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Windows</span> <span class="hljs-number">10</span><br><span class="hljs-attribute">node</span>.js@<span class="hljs-number">14</span>.<span class="hljs-number">16</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">npm</span>@<span class="hljs-number">6</span>.<span class="hljs-number">14</span>.<span class="hljs-number">11</span><br><span class="hljs-attribute">git</span> for windows@<span class="hljs-number">2</span>.<span class="hljs-number">31</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">hexo</span>@<span class="hljs-number">5</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="安装git-for-windows"><a href="#安装git-for-windows" class="headerlink" title="安装git for windows"></a>安装git for windows</h3><p>百度直接搜<a href="https://gitforwindows.org/">git for windows官网</a>，进去直接download，一路next，默认编辑器vscode就行,安装完成之后需设置用户名和电子邮箱，用下面两行命令就行。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;xxx&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;xxx@xxx.com&quot;</span><br></code></pre></td></tr></table></figure><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p><a href="https://nodejs.org/en/">nodejs官网</a>,进去下载稳定版(LTS)，安装一路next，是否安装配套依赖的时候勾上就行（不勾应该也可以，就是一堆python什么的），安装完了用cmd看看node和npm版本</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br>npm -v<br></code></pre></td></tr></table></figure><h2 id="创建github仓库"><a href="#创建github仓库" class="headerlink" title="创建github仓库"></a>创建github仓库</h2><p>创建仓库挺简单的，只要注意仓库名创建为<code>xxx.github.io</code>即可，xxx为GitHub用户名即可，创建完毕后博客访问就可以用 <a href="http://xxx.github.io/">http://xxx.github.io</a> 了。</p><h2 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h2><h3 id="获取SSH-key"><a href="#获取SSH-key" class="headerlink" title="获取SSH key"></a>获取SSH key</h3><p>首先用git bash执行:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure><p>显示No such file or directory则说明电脑里没有SSH，用下面的命令创建SSH:</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;邮件地址&quot;</span><br></code></pre></td></tr></table></figure><p>连续三次回车（不设置密钥），会生成两个文件，路径会显示在git上，打开那个目录用记事本打开<code>id_rsa.pub</code>文件复制全部内容到github-&gt;setting-&gt;SSh and GPG keys-&gt;New SSH key-&gt;key即可</p><h3 id="测试SSH-key配置是否成功"><a href="#测试SSH-key配置是否成功" class="headerlink" title="测试SSH key配置是否成功"></a>测试SSH key配置是否成功</h3><p>git输入:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure><p>显示<code>Are you sure you want to continue connecting(yes/no)</code>输入yes，看到</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Hi xxx! You’ve successfully authenticated, <span class="hljs-keyword">but</span> GitHub <span class="hljs-keyword">does</span> <span class="hljs-keyword">not</span> provide shell access.<br></code></pre></td></tr></table></figure><p>表示SSH配置成功。</p><h1 id="配置hexo"><a href="#配置hexo" class="headerlink" title="配置hexo"></a>配置hexo</h1><h2 id="hexo官网"><a href="#hexo官网" class="headerlink" title="hexo官网"></a><a href="https://hexo.io/">hexo官网</a></h2><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>自己在电脑里新建一个文件夹（名字无所谓），这个文件夹作为存放网站代码的地方。新建完之后将git工作目录切换到这个文件夹</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift">cd <span class="hljs-regexp">/e/</span>code<span class="hljs-regexp">/hexo/</span><br>hexo <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>hexo会自动下载一些文件到这个目录，如果电脑上有网络代理，这时可能会出现问题，这时需要到Windows设置里看网络代理的端口，然后在git里输入如下命令：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global http.proxy localhost:xxxx (xxxx为端口号)</span><br></code></pre></td></tr></table></figure><p>然后再init即可，记得执行完毕之后取消git的代理：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">git config --<span class="hljs-keyword">global</span> --<span class="hljs-keyword">unset</span> <span class="hljs-keyword">http</span>.proxy<br></code></pre></td></tr></table></figure><p>然后就可以开始生成博客的静态页面了</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> g <span class="hljs-comment"># 生成</span><br>hexo s <span class="hljs-comment">#启动本地预览服务</span><br></code></pre></td></tr></table></figure><p>打开浏览器访问<a href="http://localhost:4000即可看到生成的博客页面">http://localhost:4000即可看到生成的博客页面</a></p><h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><p><a href="https://hexo.io/themes/">官方主题网址</a><br>首先下载主题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /e/code/hexo/<br>git <span class="hljs-built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia<br></code></pre></td></tr></table></figure><p>下载完毕后修改<code>_config.yml</code>中的<code>theme:landscape</code>为<code>theme:yilia</code>，修改完毕后重新生成一遍博客页面即可。</p><h1 id="上传到GitHub"><a href="#上传到GitHub" class="headerlink" title="上传到GitHub"></a>上传到GitHub</h1><p>首先确定SSH key配置成功，然后修改<code>_config.yml</code>中的deploy</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">deploy:</span><br>  <span class="hljs-params">type:</span> git<br>  <span class="hljs-params">repository:</span> git@github.com:xxx<span class="hljs-symbol">/xxx.github.io.git</span> <span class="hljs-comment"># 你仓库的SSH地址</span><br>  <span class="hljs-params">branch:</span> master<br></code></pre></td></tr></table></figure><p>然后用git bush输入hexo d即可上传到Github</p><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="http://blog.haoji.me/build-blog-website-by-hexo-github.html?from=xa">使用hexo+github搭建免费个人博客详细教程</a><br><a href="https://blog.csdn.net/Gfeiyv/article/details/104570075/">已解决！hexo+github搭建个人博客安装hexo时，hexo init初始化一直报错</a><br><a href="https://www.jianshu.com/p/51f7b43c162e">体验hexo+github搭建免费个人博客</a><br><a href="https://hexo.io/docs/">hexo官方文档</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>2021留档</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习笔记：复杂网络-2021留档</title>
    <link href="/2025/06/28/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C-2021%E7%95%99%E6%A1%A3/"/>
    <url>/2025/06/28/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C-2021%E7%95%99%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="社团发现算法"><a href="#社团发现算法" class="headerlink" title="社团发现算法"></a>社团发现算法</h1><h3 id="基于聚类粒化的社团发现算法"><a href="#基于聚类粒化的社团发现算法" class="headerlink" title="基于聚类粒化的社团发现算法"></a>基于聚类粒化的社团发现算法</h3><p>算法分为几步：首先将每个节点粒化，即将其本身和其直接连接的节点看作一个粒子，然后将邻接的粒子进行邻接粒化，即进行粒子合并其中粒子是否邻接可用下图的邻接粒化系数判断<br><img src="/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C-2021%E7%95%99%E6%A1%A3/%E9%82%BB%E6%8E%A5%E7%B2%92%E5%8C%96%E7%B3%BB%E6%95%B0.png" alt="邻接粒化系数"><br>存在一个λλ，当邻接粒化系数大于 时可视为需要进行邻接粒化， 取值在0.3至0.6之间。同理，当粒子集合中任意两个粒子的邻接粒化系数均小于 时即社团划分成功， 的确定需配合模块度最大来决定，若存在节点同时存在于两个社团则采用邻居投票法来决定其归属于那个社团，即看其邻居中属于哪个社团的节点最多。</p><h3 id="LPA标签传播算法"><a href="#LPA标签传播算法" class="headerlink" title="LPA标签传播算法"></a>LPA标签传播算法</h3><p>初始化赋予每个节点一个社团标签，然后不断进行传播和收敛判断的迭代，传播：遍历所有节点，对节点所邻接的节点进行标签统计，将自身更新为标签权重最大的标签。收敛判断：遍历所有节点，对节点所邻接的节点进行标签统计，判断自身是否为标签权重最大的节点，若是则结束，这里需设置一个最大迭代次数。</p><h3 id="GN算法"><a href="#GN算法" class="headerlink" title="GN算法"></a>GN算法</h3><p>是一种分裂方法。其基本思想是不断的从网络中移除介数最大的边。边介数定义为网络中经过每条边的最短路径的数目。具体算法如下：<br>①计算网络中所有边的介数。<br>②移除介数最高的边。<br>③重新计算所有受影响的边的介数。<br>④重复步骤②，直到每个节点就是一个退化社团为止。</p>]]></content>
    
    
    
    <tags>
      
      <tag>2021留档</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/06/28/hello-world/"/>
    <url>/2025/06/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
