{"meta":{"title":"Lnte'blog","subtitle":"","description":"","author":"Lnte","url":"http://lnte39.github.io","root":"/"},"pages":[],"posts":[{"title":"moonlight+sunshine+lucky实现公网串流","slug":"moonlight-sunshine-lucky实现公网串流","date":"2025-06-29T14:58:08.000Z","updated":"2025-06-29T15:41:23.580Z","comments":true,"path":"2025/06/29/moonlight-sunshine-lucky实现公网串流/","permalink":"http://lnte39.github.io/2025/06/29/moonlight-sunshine-lucky%E5%AE%9E%E7%8E%B0%E5%85%AC%E7%BD%91%E4%B8%B2%E6%B5%81/","excerpt":"","text":"参考 基本思路： ​ 局域网串流：Moonlight（客户端）+Sunshine（服务端）​ 内网穿透：Lucky动态域名解析+IPv6（Zerotier、TailScale等组网软件也可，无需域名，但体感不稳定） 链接3.1 Moonlight3.1.1 Moonlight iOS砖家版项目地址https://github.com/TrueZhuangJia/moonlight-ios-NativeMultiTouchPassthrough3.1.2 Moonlight iOS砖家版下载地址法1：登录外区AppleID后打开下面的链接: https://apps.apple.com/us/app/moonlight-zwm/id6590630545法2：Apple Store搜索并安装TestFlight后打开下面的链接: https://testflight.apple.com/join/1JDEKywe3.1.3 Moonlight iOS砖家版开发者b站社区支持https://b23.tv/zrpBXfT3.1.4 Moonlight 安卓威力加强版项目地址https://github.com/qiin2333/moonlight-android3.1.5 Moonlight 安卓威力加强版下载地址https://github.com/qiin2333/moonlight-android/releases/tag/shortcut3.2 Sunshine3.2.1 Sunshine 基地版项目地址https://github.com/qiin2333/Sunshine-Foundation3.2.2 Sunshine 基地版下载地址https://github.com/qiin2333/Sunshine-Foundation/releases/3.2.3 Sunshine 基地版官方教程https://docs.qq.com/aio/DSGdQc3htbFJjSFdO?p=DXpTjzl2kZwBjN7jlRMkRJ3.3 公网串流3.3.1 IPv6连接测试https://ipv6-test.netcologne.de/3.3.2 本机IPv6地址https://6.ipw.cn/3.3.3 Lucky项目地址https://github.com/gdy666/lucky3.3.5 Lucky下载地址https://github.com/gdy666/lucky/releases/download/v2.14.0/lucky_2.14.0_Windows_x86_64.tar.gz 服务端配置-安装并配置Sunshine安装：Sunshine请安装在C盘默认路径，否则会导致部分功能失效。设置中文：Configuration——General——Locale——简体中文——保存应用，关闭Sunshine再重新打开即可切换至中文。配置——Audio&#x2F;Video——适配器名称选择你的独立显卡。输出显示器指定——就是要用虚拟显示器~。串流时显示器组合状态设定——禁用其他显示器，只启用指定显示器。在虚拟显示器支持分辨率中添加平板或手机的分辨率，添加好后点击保存应用。配置——Network——启用UPnP。IP 地址族——IPv4+IPv6。允许的Web UI访问来源——任何人都可以访问Web UI。禁用公网加密模式——保存应用。 客户端配置-安装并配置Moonlight安装链接中对应的版本的Moonlight即可，在同一局域网下用服务端ip连接。 光猫及路由器配置一般来说，光猫的默认配置为路由器模式，不会给下游设备分配IPv6公网地址（一般家庭宽带分配的是一个IPv6地址段，可以给下游设备使用），因此需要将光猫改为桥接模式，将路由功能交由下游路由器，在下游路由器中开启Native模式的IPv6即可给局域网中设备分配公网IPv6地址。 如果是老光猫，切换桥接模式一般是较容易的，谷歌光猫的型号就能找到教程，基本流程都是获取光猫的超级账号，使用超级账号登录，记录并删除原有route模式连接，创建新的Bridge连接。如果是新光猫，一般都使用了动态加密，需要联系宽带的装维人员获取。 电信超级账号：telecomadmin 超级密码：nE7jA%m或admintelecom移动超级账号：CMCCAdmin 超级密码：aDmH%MdA联通超级账号：超级管理员或CUAdmin 超级密码：CUAdmin 内网穿透配置-Lucy配置光猫和路由器配置成功后，可以通过 https://6.ipw.cn/ 获取本机IPv6地址，此时可以先尝试在客户端用移动网络使用:[IPv6地址]连接服务端测试连通性，无问题则可以开始配置IPv6的动态域名解析。 买一个域名，推荐namesilo上买，然后用cloudflare管理域名。在cloudflare中创建一个API令牌（可以参考lucky实现动态DDNS域名解析 + https安全访问教程），然后在Lucy客户端中设置任务自动解析IPv6地址到域名即可使用域名串流。 遇到的问题及解决方法使用6.ipw.cn获取的ipv6公网地址不正确主路由是mac mini M2使用openwrt桥接光猫拨号上网，openclash全局接管流量分流并重定向到Adguardhome做dns解析，在openwrt中可以看到网络中的设备正常获取到公网ipv6地址，ipv6网址测试也有ipv6地址，但使用从6.ipw.cn获取的ipv6地址串流电脑失败，提示端口未开放，但测试电脑相关端口均开放。 解决：从openwrt和电脑的网卡地址中获取的公网ipv6地址与6.ipw.cn不一致，使用电脑网卡获取的ipv6公网地址成功串流到电脑 原因：由于openclash全局接管了流量，导致6.ipw.cn最终由主路由代理访问，得到的是主路由的公网ipv6地址 lucky获取的ipv6地址不正确lucky获取的是主路由的ipv6地址 解决：使用通过网卡获取，使用正则表达式手动选择公网ip（^2409）即可正确获取ipv6地址 原因：lucky默认通过网址获取，而发往网址的流量均被主路由代理","categories":[],"tags":[{"name":"tips，串流，","slug":"tips，串流，","permalink":"http://lnte39.github.io/tags/tips%EF%BC%8C%E4%B8%B2%E6%B5%81%EF%BC%8C/"}]},{"title":"pic","slug":"pic-1","date":"2025-06-28T16:37:45.000Z","updated":"2025-06-28T16:40:41.632Z","comments":true,"path":"2025/06/29/pic-1/","permalink":"http://lnte39.github.io/2025/06/29/pic-1/","excerpt":"","text":"图转网络","categories":[],"tags":[{"name":"图","slug":"图","permalink":"http://lnte39.github.io/tags/%E5%9B%BE/"}]},{"title":"学习笔记：PHP-mysql-2021留档","slug":"学习笔记：PHP-mysql-2021留档","date":"2025-06-28T14:03:54.000Z","updated":"2025-06-28T16:14:54.982Z","comments":true,"path":"2025/06/28/学习笔记：PHP-mysql-2021留档/","permalink":"http://lnte39.github.io/2025/06/28/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9APHP-mysql-2021%E7%95%99%E6%A1%A3/","excerpt":"","text":"数据库分类基于储存介质：硬盘、内存 关系型数据库：存储在磁盘中 非关系性数据库：存储在内存中 关系型数据库基本概念关系数据库是建立在__关系模型__基础上的数据库 关系模型由__关系数据结构__、关系操作集合、__关系完整性约束__构成 关系数据结构：数据的存储方式，是一种二维表的形式存储 关系操作集合：用来关联和管理对应存储数据的命令，SQL指令 关系完整性约束：数据内部对应的关联关系，以及数据与数据之间的对应关联关系 表内约束：对应的具体列只能放对应的数据表间约束：自然界各实体都是有这对应的关联关系（外键） SQL基本介绍结构化查询语言Structured Query Language,一种编程语言。 分类数据查询语言 DQL专门用于查询数据，包含__SELECT、SHOW、WHERE、HAVING、ORDER BY、GROUP BY__等 数据操作语言 DML专门运用写数据，包含__INSERT、UPDATE、DELETE__等 事务处理语言 TPL专门用于事务安全处理，包含__TRANSCATION、BEGIN、COMMIT、ROLLBACK__等 数据控制语言 DCL专门用于权限管理，包含__GRANT、REVOKE__ 数据定义语言 DDL专门用于结构管理，包含__CREATE、DROP__ MySQL启动和停止MySQL服务MySQL具有服务端和客户端 服务端对应软件：Mysqld.exe 命令行 Net start 服务(mysql)：开启服务 Net stop 服务(mysql)：关闭服务 用windows服务启动略 登录和退出MySQL系统登录 找到mysql.exe（如果加入了环境变量可以直接用cmd控制台访问） 输入对应服务器地址：-h:host &#x2F; -h[IP地址&#x2F;域名] 输服务器中Mysql监听的端口：-P:port 输入用户名：-u:username(默认为root) 输入密码：-p:password(默认为root) 连接认证基本语法：Mysql.exe&#x2F;mysql -hhost -Pport -uroot -proot 退出使用SQL提供的指令 exit; \\q Quit; MySQL服务端架构MySQL服务端由以下几层构成： 数据库管理系统（最外层）：DBMS，专门管理服务器端的所有内容 数据库（第二层）：DB，专门用于存储具体实体的数据（可以有很多个） 二维数据表（第三层）：Table，专门用于存储具体实体的数据 字段（第四层）：Field，具体存储某种类型的数据（实际存储单元） 数据库基本操作创建数据库基本语法：create database 数据库名字 [库选项]; 库选项：数据库相关属性 字符集：charset 字符集，代表着当前数据库下的所有表存储的数据默认指定的字符集 校对集：collate 校对集 显示数据库显示所有数据库：show databases； 显示部分数据库基本语法：show databases like ‘匹配模式’； _：匹配当前位置单个字符 %：匹配指定位置多个字符 eg:获取以my开头的所有数据库：‘my%’ 显示数据库创建语句基本语法：show create database 数据库名称； 选择数据库基本语法：use 数据库名称; 修改数据库修改数据库的库选项 基本语法：alter database 数据库名称 字符集; 删除数据库基本语法：drop database 数据库名称; 数据表操作创建数据表普通数据表基本语法：create table 表名（字段名 字段类型 [字段属性]，字段名 字段类型 [字段属性]，…） [表选项]； 数据表需挂载在数据库下： 在数据表前加上数据库名用”.”连接 事先用use选择数据库 表选项：与数据库类似 Engine：存储引擎，innodb&#x2F;myisam Charset：字符集，只对表自己有效，优先级高于数据库设置 Collate：校对集 复制已有表结构从已经存在的表复制一份（只复制结构，数据不复制） 基本语法：create table 新表名 like 表名; 显示数据表显示所有表基本语法：show tables; 匹配显示表基本语法：show tables like ’匹配模式‘ 显示表结构显示表中所包含的字段信息（名字、属性、） 语法：describe 表名; desc 表名; show columns from 表名; 显示表创建语句基本语法：show create table 表名; Mysql中有多种语句结束符，’;‘和’\\g’的效果一样，都是字段在上排，’\\G’是字段在左侧竖列 设置表属性engine、charset、collate 基本语法：alter table 表名","categories":[],"tags":[{"name":"2021留档","slug":"2021留档","permalink":"http://lnte39.github.io/tags/2021%E7%95%99%E6%A1%A3/"}]},{"title":"学习笔记：PHP-基本语法-2021留档","slug":"学习笔记：PHP-基本语法-2021留档","date":"2025-06-28T14:00:28.000Z","updated":"2025-06-28T16:16:39.383Z","comments":true,"path":"2025/06/28/学习笔记：PHP-基本语法-2021留档/","permalink":"http://lnte39.github.io/2025/06/28/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9APHP-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95-2021%E7%95%99%E6%A1%A3/","excerpt":"","text":"变量的定义符号：$ 变量传值传值：a&#x3D;a&#x3D;b;传址：a&#x3D;&amp;a&#x3D;&b; 常量的定义define函数定义（支持常量名更多）：define(”常量名“，常量值);const定义：const 常量名&#x3D;常量值;define与const定义有权限的区别define函数的第三个bool参数可以使常量名有大小写区分对用define定义的特殊常量名的常量，使用需采用constant函数 数据类型简单数据类型整型：int ，二进制0b开头、八进制0开头、十六进制0x开头浮点型：float字符串型：string布尔类型：bool 复合数据类型对象类型：object数组类型：array 特殊数据类型资源类型：resource空类型：NULL 数据类型的转换自动转换：进行算术运算自动转换强制转换：”(数据类型)$变量名”,手动转换，若要转换为NULL类型需使用unset()函数，不改变数据本身类型 tobool： 12345678910&lt;?phpvar_dump((bool) &quot;&quot;); // bool(false)var_dump((bool) 1); // bool(true)var_dump((bool) -2); // bool(true)var_dump((bool) &quot;foo&quot;); // bool(true)var_dump((bool) 2.3e5); // bool(true)var_dump((bool) array(12)); // bool(true)var_dump((bool) array()); // bool(false)var_dump((bool) &quot;false&quot;); // bool(true)?&gt; string to value： 以字母开头的字符串，永远为0 以数字开头的字符串，取到碰到字符为止 数据类型判断is_数据类型(变量名)：返回bool值,使用var_dump()函数查看结果gettype(变量名)：返回数据类型的字符串settype(变量名)：设定数据类型，改变数据本身的数据类型，返回bool类型empty():判断值是否为“空“，非NULLisset():判断是否存在 几个特殊的运算符特殊的比较运算符&#x3D;&#x3D;&#x3D;:全等于，左边与右边相同：大小及数据的类型均需要相同!&#x3D;&#x3D;:不全等于，只有大小或类型不同 连接运算符.：将两个字符串连接到一起.&#x3D;：复合运算，将左右内容连接到一起并赋给左边 错误抑制符@：在可能出错的表达式前加上即可，作用类似于关闭错误回显 文件包含四种形式Include：包含文件Include_once：只包含一次文件，系统会自动判断是否已经包含过文件Require：与Include相同Require_once：与Include_once相同 被包含的文件是单独编译的，即被包含文件有错误时，代码直到执行到include这一行才会报错。 include与require的区别：包含不到文件时报错的形式不同，include报错级别较轻，不会阻止代码运行，require会显示fatal error终止代码运行 文件加载路径绝对路径和相对路径加载的区别： 绝对路径相对效率偏低，但是相对安全 相对路径相对效率较高，但是容易出错误 绝对路径 从磁盘根目录开始 Windows：盘符&#x2F;路径&#x2F;PHP文件 Linux：&#x2F;路径&#x2F;PHP文件 从网站根目录开始 &#x2F;：相对于网站主机名字对应的路径 相对路径 .或者.&#x2F;：表示从当前文件夹 …&#x2F;：上一级目录 文件嵌套包含 注意包含时文件的工作目录变化了，使用相对路径要注意，当前目录变成了最外层的文件的工作目录。 .&#x2F;相当于当前工作目录，如.&#x2F;code&#x2F;bin在嵌套包含时就需要注意，而code&#x2F;bin则是相对于文件路径，相当于在路径前补全了文件的绝对路径，嵌套包含时不容易出问题。 函数定义函数格式：function 函数名(参数){} 函数调用格式：函数名(参数) PHP可在声明前调用函数 参数默认值格式：function 函数名(参数 &#x3D; value){} 默认值的定义时放在最左边的，不允许左边参数有默认值右边没有 1234567//函数调用add($a,$b);//函数定义funcion add($arg1,$arg2 = 0)&#123; echo $arg1+$arg2;&#125; 作用域 全局变量：只允许在全局空间中使用，不允许在函数中使用 局部变量：只允许在当前函数中使用 超全局变量（系统定义的变量）：没有访问限制全局变量定义后会被系统加入到$GLOBALS[‘全局变量名’]这个超全局变量中，可在函数中调用。在PHP中，其实还有一种方式，能够实现全局访问局部，同时局部也可以访问 全 局 ：global关 键 字Global关键字：是一种在函数里面定义变量的一种方式 如果使用global定义的变量名在外部存在(全局变量),那么系统在函数内部定义的变量直接指向外部全局变量所指向的内存空间（同一个变量) 如果使用global定义的变量名在外部不存在(全局变量），系统会自动在全局空间（外部)定义一个与局部变量同名的全局变量 可变函数当有一个变量的值为一个函数的名字时，可使用变量+()来充当函数名使用，可用其实现回调函数 匿名函数格式：变量名 &#x3D; function(){}；调用：变量名(); 变量保存匿名函数，本质上是得到了一个对象(closure) 闭包 伪类型Mixed：混合的，可以是多种PHP中的数据类型Number：数值的，可以是任意的数值类型（整形和浮点型） 几种系统函数输出有关的函数print():类似于echoprint_r():类似于var_dump()，只是不输出数据类型 有关时间的函数date():按照指定格式对应输出对应的时间戳,无指定时间戳则按当前时间戳，例如： 123456789101112131415161718192021&lt;?php// 设定要用的默认时区。自 PHP 5.1 可用date_default_timezone_set(&#x27;UTC&#x27;);// 输出类似：Mondayecho date(&quot;l&quot;);// 输出类似：Monday 15th of August 2005 03:12:46 PMecho date(&#x27;l dS \\of F Y h:i:s A&#x27;);// 输出：July 1, 2000 is on a Saturdayecho &quot;July 1, 2000 is on a &quot; . date(&quot;l&quot;, mktime(0, 0, 0, 7, 1, 2000));/* 在格式参数中使用常量 */// 输出类似：Wed, 25 Sep 2013 15:28:57 -0700echo date(DATE_RFC2822);// 输出类似：2000-07-01T00:00:00+00:00echo date(DATE_ATOM, mktime(0, 0, 0, 7, 1, 2000));?&gt; time()：获取当前时间戳，即从1970.1.1 00：00：00开始到当前时间的秒数microtime：获取微秒级别的时间strtotime：将按照规范输入的字符串转换成对应的时间戳 数学相关的函数max()：指定参数中最大的值min()：指定参数中最小的值rand()：产生一个随机数mt_rand()：与rand一样，比rand效率高round()：四舍五入cell()：向上取整floor()：向下取整pow()：求指定数字的指定指定指数次结果abs()：求绝对值aqrt()：求平方根 有关函数的函数function_exists()：判断指定的函数名字是否在内存中存在func_get_arg()：在自定义函数中去获取指定数值对应的参数fun_get_args()：在自定义函数中获取所有的参数（数组）func_num_args()：获取当前自定义参数的参数数量","categories":[],"tags":[{"name":"2021留档","slug":"2021留档","permalink":"http://lnte39.github.io/tags/2021%E7%95%99%E6%A1%A3/"}]},{"title":"pic","slug":"pic","date":"2025-06-28T13:58:13.000Z","updated":"2025-06-28T16:13:49.030Z","comments":true,"path":"2025/06/28/pic/","permalink":"http://lnte39.github.io/2025/06/28/pic/","excerpt":"","text":"图源网络。","categories":[],"tags":[{"name":"2021留档","slug":"2021留档","permalink":"http://lnte39.github.io/tags/2021%E7%95%99%E6%A1%A3/"}]},{"title":"自适应辛普森公式","slug":"自适应辛普森公式","date":"2025-06-28T13:56:41.000Z","updated":"2025-06-28T13:57:11.467Z","comments":true,"path":"2025/06/28/自适应辛普森公式/","permalink":"http://lnte39.github.io/2025/06/28/%E8%87%AA%E9%80%82%E5%BA%94%E8%BE%9B%E6%99%AE%E6%A3%AE%E5%85%AC%E5%BC%8F/","excerpt":"","text":"按照书上自适应辛普森公式的计算流程写了一个matlab程序（实际是作业要用这个公式实在不想算了） 12345678910111213141516171819202122232425262728%SIMPSON 自适应辛普森公式求积分% up为积分上限，down为积分下限，eps为误差限i = 0;n = 2 ^ i;s = 0;h = (up - down);s1 = h / 6 * (f(up) + 4 * f((up + down)/2) + f(down));output = zeros(100,5);while n &gt; 0 for j = 0: 1: n - 1 s = s + (2 * f( down +(j + 1/4) * h) - f( down + ( j + 1/2 ) * h) + 2* f(down + (j + 3/4 )* h)); end s2 = 1/2 * s1 + h / 6 * s; output(i + 1, :) = [n h s1 s2 s]; if eps &gt;= abs(s2 - s1) break end i = i + 1; n = 2 ^ i; h = h / 2; s1 = s2; s = 0;endendfunction [value] = f(x) value = 1/(1 + x ^ 2);end","categories":[],"tags":[{"name":"2021留档","slug":"2021留档","permalink":"http://lnte39.github.io/tags/2021%E7%95%99%E6%A1%A3/"}]},{"title":"建站记录-2021留档","slug":"建站记录-2021留档","date":"2025-06-28T13:55:28.000Z","updated":"2025-06-28T13:55:49.920Z","comments":true,"path":"2025/06/28/建站记录-2021留档/","permalink":"http://lnte39.github.io/2025/06/28/%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95-2021%E7%95%99%E6%A1%A3/","excerpt":"","text":"前言最近感觉有很多想法没记录下来最后都想不起来了，以及总是不能坚持学习一件事情，故花了一点时间按照网上教程建立了这个小型的个人博客。一是记录一下，二是作为学习笔记存放，三是借助建站了解一下网页有关知识。 准备工作安装环境12345Windows 10node.js@14.16.0npm@6.14.11git for windows@2.31.1hexo@5.4.0 安装git for windows百度直接搜git for windows官网，进去直接download，一路next，默认编辑器vscode就行,安装完成之后需设置用户名和电子邮箱，用下面两行命令就行。 12git config --global user.name &quot;xxx&quot;git config --global user.email &quot;xxx@xxx.com&quot; 安装node.jsnodejs官网,进去下载稳定版(LTS)，安装一路next，是否安装配套依赖的时候勾上就行（不勾应该也可以，就是一堆python什么的），安装完了用cmd看看node和npm版本 12node -vnpm -v 创建github仓库创建仓库挺简单的，只要注意仓库名创建为xxx.github.io即可，xxx为GitHub用户名即可，创建完毕后博客访问就可以用 http://xxx.github.io 了。 配置SSH key获取SSH key首先用git bash执行: 1ssh -T git@github.com 显示No such file or directory则说明电脑里没有SSH，用下面的命令创建SSH: 1ssh-keygen -t rsa -C &quot;邮件地址&quot; 连续三次回车（不设置密钥），会生成两个文件，路径会显示在git上，打开那个目录用记事本打开id_rsa.pub文件复制全部内容到github-&gt;setting-&gt;SSh and GPG keys-&gt;New SSH key-&gt;key即可 测试SSH key配置是否成功git输入: 1ssh -T git@github.com 显示Are you sure you want to continue connecting(yes/no)输入yes，看到 1Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 表示SSH配置成功。 配置hexohexo官网原理由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。 安装自己在电脑里新建一个文件夹（名字无所谓），这个文件夹作为存放网站代码的地方。新建完之后将git工作目录切换到这个文件夹 12cd /e/code/hexo/hexo init hexo会自动下载一些文件到这个目录，如果电脑上有网络代理，这时可能会出现问题，这时需要到Windows设置里看网络代理的端口，然后在git里输入如下命令： 1git config --global http.proxy localhost:xxxx (xxxx为端口号) 然后再init即可，记得执行完毕之后取消git的代理： 1git config --global --unset http.proxy 然后就可以开始生成博客的静态页面了 12hexo g # 生成hexo s #启动本地预览服务 打开浏览器访问http://localhost:4000即可看到生成的博客页面 修改主题官方主题网址首先下载主题： 12cd /e/code/hexo/git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 下载完毕后修改_config.yml中的theme:landscape为theme:yilia，修改完毕后重新生成一遍博客页面即可。 上传到GitHub首先确定SSH key配置成功，然后修改_config.yml中的deploy 1234deploy: type: git repository: git@github.com:xxx/xxx.github.io.git # 你仓库的SSH地址 branch: master 然后用git bush输入hexo d即可上传到Github 相关链接使用hexo+github搭建免费个人博客详细教程已解决！hexo+github搭建个人博客安装hexo时，hexo init初始化一直报错体验hexo+github搭建免费个人博客hexo官方文档","categories":[],"tags":[{"name":"2021留档","slug":"2021留档","permalink":"http://lnte39.github.io/tags/2021%E7%95%99%E6%A1%A3/"}]},{"title":"学习笔记：复杂网络-2021留档","slug":"学习笔记：复杂网络-2021留档","date":"2025-06-28T13:53:57.000Z","updated":"2025-06-28T16:17:03.384Z","comments":true,"path":"2025/06/28/学习笔记：复杂网络-2021留档/","permalink":"http://lnte39.github.io/2025/06/28/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C-2021%E7%95%99%E6%A1%A3/","excerpt":"","text":"社团发现算法基于聚类粒化的社团发现算法算法分为几步：首先将每个节点粒化，即将其本身和其直接连接的节点看作一个粒子，然后将邻接的粒子进行邻接粒化，即进行粒子合并其中粒子是否邻接可用下图的邻接粒化系数判断存在一个λλ，当邻接粒化系数大于 时可视为需要进行邻接粒化， 取值在0.3至0.6之间。同理，当粒子集合中任意两个粒子的邻接粒化系数均小于 时即社团划分成功， 的确定需配合模块度最大来决定，若存在节点同时存在于两个社团则采用邻居投票法来决定其归属于那个社团，即看其邻居中属于哪个社团的节点最多。 LPA标签传播算法初始化赋予每个节点一个社团标签，然后不断进行传播和收敛判断的迭代，传播：遍历所有节点，对节点所邻接的节点进行标签统计，将自身更新为标签权重最大的标签。收敛判断：遍历所有节点，对节点所邻接的节点进行标签统计，判断自身是否为标签权重最大的节点，若是则结束，这里需设置一个最大迭代次数。 GN算法是一种分裂方法。其基本思想是不断的从网络中移除介数最大的边。边介数定义为网络中经过每条边的最短路径的数目。具体算法如下：①计算网络中所有边的介数。②移除介数最高的边。③重新计算所有受影响的边的介数。④重复步骤②，直到每个节点就是一个退化社团为止。","categories":[],"tags":[{"name":"2021留档","slug":"2021留档","permalink":"http://lnte39.github.io/tags/2021%E7%95%99%E6%A1%A3/"}]}],"categories":[],"tags":[{"name":"tips，串流，","slug":"tips，串流，","permalink":"http://lnte39.github.io/tags/tips%EF%BC%8C%E4%B8%B2%E6%B5%81%EF%BC%8C/"},{"name":"图","slug":"图","permalink":"http://lnte39.github.io/tags/%E5%9B%BE/"},{"name":"2021留档","slug":"2021留档","permalink":"http://lnte39.github.io/tags/2021%E7%95%99%E6%A1%A3/"}]}