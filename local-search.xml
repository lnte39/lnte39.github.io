<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>学习笔记：PHP</title>
    <link href="/2021/03/31/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9APHP/"/>
    <url>/2021/03/31/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9APHP/</url>
    
    <content type="html"><![CDATA[<h2 id="变量的定义"><a class="markdownIt-Anchor" href="#变量的定义"></a> 变量的定义</h2><p>符号：$</p><h2 id="变量传值"><a class="markdownIt-Anchor" href="#变量传值"></a> 变量传值</h2><p>传值：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo></mrow><annotation encoding="application/x-tex">a=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span></span>b;<br>传址：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo><mi mathvariant="normal">&amp;</mi></mrow><annotation encoding="application/x-tex">a=\&amp;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">&amp;</span></span></span></span>b;</p><h2 id="常量的定义"><a class="markdownIt-Anchor" href="#常量的定义"></a> 常量的定义</h2><p>define函数定义（支持常量名更多）：define(”常量名“，常量值);<br>const定义：const 常量名=常量值;<br>define与const定义有权限的区别<br>define函数的第三个bool参数可以使常量名有大小写区分<br>对用define定义的特殊常量名的常量，使用需采用constant函数</p><h2 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h2><h3 id="简单数据类型"><a class="markdownIt-Anchor" href="#简单数据类型"></a> 简单数据类型</h3><p>整型：int ，二进制0b开头、八进制0开头、十六进制0x开头<br>浮点型：float<br>字符串型：string<br>布尔类型：bool</p><h3 id="复合数据类型"><a class="markdownIt-Anchor" href="#复合数据类型"></a> 复合数据类型</h3><p>对象类型：object<br>数组类型：array</p><h3 id="特殊数据类型"><a class="markdownIt-Anchor" href="#特殊数据类型"></a> 特殊数据类型</h3><p>资源类型：resource<br>空类型：NULL</p><h2 id="数据类型的转换"><a class="markdownIt-Anchor" href="#数据类型的转换"></a> 数据类型的转换</h2><p>自动转换：进行算术运算自动转换<br>强制转换：&quot;(数据类型)$变量名&quot;,手动转换，若要转换为NULL类型需使用unset()函数，不改变数据本身类型</p><h3 id="tobool"><a class="markdownIt-Anchor" href="#tobool"></a> tobool：</h3><p><img src="/2021/03/31/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9APHP/tobool.png" alt></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>var_dump((<span class="hljs-keyword">bool</span>) <span class="hljs-string">&quot;&quot;</span>);        <span class="hljs-comment">// bool(false)</span><br>var_dump((<span class="hljs-keyword">bool</span>) <span class="hljs-number">1</span>);         <span class="hljs-comment">// bool(true)</span><br>var_dump((<span class="hljs-keyword">bool</span>) -<span class="hljs-number">2</span>);        <span class="hljs-comment">// bool(true)</span><br>var_dump((<span class="hljs-keyword">bool</span>) <span class="hljs-string">&quot;foo&quot;</span>);     <span class="hljs-comment">// bool(true)</span><br>var_dump((<span class="hljs-keyword">bool</span>) <span class="hljs-number">2.3e5</span>);     <span class="hljs-comment">// bool(true)</span><br>var_dump((<span class="hljs-keyword">bool</span>) <span class="hljs-keyword">array</span>(<span class="hljs-number">12</span>)); <span class="hljs-comment">// bool(true)</span><br>var_dump((<span class="hljs-keyword">bool</span>) <span class="hljs-keyword">array</span>());   <span class="hljs-comment">// bool(false)</span><br>var_dump((<span class="hljs-keyword">bool</span>) <span class="hljs-string">&quot;false&quot;</span>);   <span class="hljs-comment">// bool(true)</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="string-to-value"><a class="markdownIt-Anchor" href="#string-to-value"></a> string to value：</h3><p>1 以字母开头的字符串，永远为0<br>2 以数字开头的字符串，取到碰到字符为止</p><h2 id="数据类型判断"><a class="markdownIt-Anchor" href="#数据类型判断"></a> 数据类型判断</h2><p>is_数据类型(变量名)：返回bool值,使用var_dump()函数查看结果<br>gettype(变量名)：返回数据类型的字符串<br>settype(变量名)：设定数据类型，改变数据本身的数据类型，返回bool类型<br>empty():判断值是否为“空“，非NULL<br>isset():判断是否存在<br><img src="/2021/03/31/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9APHP/aform.png" alt></p><h2 id="几个特殊的运算符"><a class="markdownIt-Anchor" href="#几个特殊的运算符"></a> 几个特殊的运算符</h2><h3 id="特殊的比较运算符"><a class="markdownIt-Anchor" href="#特殊的比较运算符"></a> 特殊的比较运算符</h3><p>===:全等于，左边与右边相同：大小及数据的类型均需要相同<br>!==:不全等于，只有大小或类型不同</p><h3 id="连接运算符"><a class="markdownIt-Anchor" href="#连接运算符"></a> 连接运算符</h3><p>.：将两个字符串连接到一起<br>.=：复合运算，将左右内容连接到一起并赋给左边</p><h3 id="错误抑制符"><a class="markdownIt-Anchor" href="#错误抑制符"></a> 错误抑制符</h3><p>@：在可能出错的表达式前加上即可，作用类似于关闭错误回显</p><h2 id="几种系统函数"><a class="markdownIt-Anchor" href="#几种系统函数"></a> 几种系统函数</h2><h3 id="输出有关的函数"><a class="markdownIt-Anchor" href="#输出有关的函数"></a> 输出有关的函数</h3><p>print():类似于echo<br>print_r():类似于var_dump()，只是不输出数据类型</p><h3 id="有关时间的函数"><a class="markdownIt-Anchor" href="#有关时间的函数"></a> 有关时间的函数</h3><p>date():按照指定格式对应输出对应的时间戳,无指定时间戳则按当前时间戳，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 设定要用的默认时区。自 PHP 5.1 可用</span><br>date_default_timezone_set(<span class="hljs-string">&#x27;UTC&#x27;</span>);<br><br><br><span class="hljs-comment">// 输出类似：Monday</span><br><span class="hljs-keyword">echo</span> date(<span class="hljs-string">&quot;l&quot;</span>);<br><br><span class="hljs-comment">// 输出类似：Monday 15th of August 2005 03:12:46 PM</span><br><span class="hljs-keyword">echo</span> date(<span class="hljs-string">&#x27;l dS \of F Y h:i:s A&#x27;</span>);<br><br><span class="hljs-comment">// 输出：July 1, 2000 is on a Saturday</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;July 1, 2000 is on a &quot;</span> . date(<span class="hljs-string">&quot;l&quot;</span>, mktime(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2000</span>));<br><br><span class="hljs-comment">/* 在格式参数中使用常量 */</span><br><span class="hljs-comment">// 输出类似：Wed, 25 Sep 2013 15:28:57 -0700</span><br><span class="hljs-keyword">echo</span> date(DATE_RFC2822);<br><br><span class="hljs-comment">// 输出类似：2000-07-01T00:00:00+00:00</span><br><span class="hljs-keyword">echo</span> date(DATE_ATOM, mktime(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2000</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2021/03/31/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9APHP/dateformat.png" alt><br>time()：获取当前时间戳，即从1970.1.1 00：00：00开始到当前时间的秒数<br>microtime：获取微秒级别的时间<br>strtotime：将按照规范输入的字符串转换成对应的时间戳</p>]]></content>
    
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习笔记：复杂网络</title>
    <link href="/2021/03/28/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C/"/>
    <url>/2021/03/28/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="社团发现算法"><a class="markdownIt-Anchor" href="#社团发现算法"></a> 社团发现算法</h1><h3 id="基于聚类粒化的社团发现算法"><a class="markdownIt-Anchor" href="#基于聚类粒化的社团发现算法"></a> 基于聚类粒化的社团发现算法</h3><p>算法分为几步：首先将每个节点粒化，即将其本身和其直接连接的节点看作一个粒子，然后将邻接的粒子进行邻接粒化，即进行粒子合并其中粒子是否邻接可用下图的邻接粒化系数判断<br><img src="/2021/03/28/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C/%E9%82%BB%E6%8E%A5%E7%B2%92%E5%8C%96%E7%B3%BB%E6%95%B0.png" alt><br>存在一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span></span></span></span>，当邻接粒化系数大于 时可视为需要进行邻接粒化， 取值在0.3至0.6之间。同理，当粒子集合中任意两个粒子的邻接粒化系数均小于 时即社团划分成功， 的确定需配合模块度最大来决定，若存在节点同时存在于两个社团则采用邻居投票法来决定其归属于那个社团，即看其邻居中属于哪个社团的节点最多。</p><h3 id="lpa标签传播算法"><a class="markdownIt-Anchor" href="#lpa标签传播算法"></a> LPA标签传播算法</h3><p>初始化赋予每个节点一个社团标签，然后不断进行传播和收敛判断的迭代，传播：遍历所有节点，对节点所邻接的节点进行标签统计，将自身更新为标签权重最大的标签。收敛判断：遍历所有节点，对节点所邻接的节点进行标签统计，判断自身是否为标签权重最大的节点，若是则结束，这里需设置一个最大迭代次数。</p><h3 id="gn算法"><a class="markdownIt-Anchor" href="#gn算法"></a> GN算法</h3><p>是一种分裂方法。其基本思想是不断的从网络中移除介数最大的边。边介数定义为网络中经过每条边的最短路径的数目。具体算法如下：<br>①计算网络中所有边的介数。<br>②移除介数最高的边。<br>③重新计算所有受影响的边的介数。<br>④重复步骤②，直到每个节点就是一个退化社团为止。</p>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pic</title>
    <link href="/2021/03/28/pic/"/>
    <url>/2021/03/28/pic/</url>
    
    <content type="html"><![CDATA[<p><img src="/2021/03/28/pic/1.jpg" alt><br><img src="/2021/03/28/pic/2.png" alt><br><img src="/2021/03/28/pic/3.jpg" alt><br><img src="/2021/03/28/pic/4.jpg" alt><br><img src="/2021/03/28/pic/5.jpg" alt><br>图源网络。</p>]]></content>
    
    
    
    <tags>
      
      <tag>夸</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自适应辛普森公式</title>
    <link href="/2021/03/28/%E8%87%AA%E9%80%82%E5%BA%94%E8%BE%9B%E6%99%AE%E6%A3%AE%E5%85%AC%E5%BC%8F/"/>
    <url>/2021/03/28/%E8%87%AA%E9%80%82%E5%BA%94%E8%BE%9B%E6%99%AE%E6%A3%AE%E5%85%AC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>按照书上自适应辛普森公式的计算流程写了一个matlab程序（实际是作业要用这个公式实在不想算了）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C">%SIMPSON 自适应辛普森公式求积分<br>% up为积分上限，down为积分下限，eps为误差限<br>i = <span class="hljs-number">0</span>;<br>n = <span class="hljs-number">2</span> ^ i;<br>s = <span class="hljs-number">0</span>;<br>h = (up - down);<br>s1 = h / <span class="hljs-number">6</span> * (f(up) + <span class="hljs-number">4</span> * f((up + down)/<span class="hljs-number">2</span>) + f(down));<br>output = zeros(<span class="hljs-number">100</span>,<span class="hljs-number">5</span>);<br><span class="hljs-keyword">while</span> n &gt; <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j = <span class="hljs-number">0</span>: <span class="hljs-number">1</span>: n - <span class="hljs-number">1</span><br>        s = s + (<span class="hljs-number">2</span> * f( down +(j + <span class="hljs-number">1</span>/<span class="hljs-number">4</span>) * h) - f( down + ( j + <span class="hljs-number">1</span>/<span class="hljs-number">2</span> ) * h) + <span class="hljs-number">2</span>* f(down + (j + <span class="hljs-number">3</span>/<span class="hljs-number">4</span> )* h));<br>    end<br>    s2 = <span class="hljs-number">1</span>/<span class="hljs-number">2</span> * s1 + h / <span class="hljs-number">6</span> * s;<br>    output(i + <span class="hljs-number">1</span>, :) = [n h s1 s2 s];<br>    <span class="hljs-keyword">if</span> eps &gt;= <span class="hljs-built_in">abs</span>(s2 - s1) <br>        <span class="hljs-keyword">break</span><br>    end<br>    i = i + <span class="hljs-number">1</span>;<br>    n = <span class="hljs-number">2</span> ^ i;<br>    h = h / <span class="hljs-number">2</span>;<br>    s1 = s2; <br>    s = <span class="hljs-number">0</span>;<br>end<br>end<br><br>function [value] = f(x)<br>    value = <span class="hljs-number">1</span>/(<span class="hljs-number">1</span> + x ^ <span class="hljs-number">2</span>);<br>end<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>matlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建站过程</title>
    <link href="/2021/03/27/my-first-blog/"/>
    <url>/2021/03/27/my-first-blog/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>最近感觉有很多想法没记录下来最后都想不起来了，以及总是不能坚持学习一件事情，故花了一点时间按照网上教程建立了这个小型的个人博客。一是记录一下，二是作为学习笔记存放，三是借助建站了解一下网页有关知识。</p><h1 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h1><h2 id="安装环境"><a class="markdownIt-Anchor" href="#安装环境"></a> 安装环境</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Windows</span> <span class="hljs-number">10</span><br><span class="hljs-attribute">node</span>.js@<span class="hljs-number">14</span>.<span class="hljs-number">16</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">npm</span>@<span class="hljs-number">6</span>.<span class="hljs-number">14</span>.<span class="hljs-number">11</span><br><span class="hljs-attribute">git</span> for windows@<span class="hljs-number">2</span>.<span class="hljs-number">31</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">hexo</span>@<span class="hljs-number">5</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="安装git-for-windows"><a class="markdownIt-Anchor" href="#安装git-for-windows"></a> 安装git for windows</h3><p>百度直接搜<a href="https://gitforwindows.org/">git for windows官网</a>，进去直接download，一路next，默认编辑器vscode就行,安装完成之后需设置用户名和电子邮箱，用下面两行命令就行。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span> <span class="hljs-string">&quot;xxx&quot;</span><br>git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span> <span class="hljs-string">&quot;xxx@xxx.com&quot;</span><br></code></pre></td></tr></table></figure><h3 id="安装nodejs"><a class="markdownIt-Anchor" href="#安装nodejs"></a> 安装node.js</h3><p><a href="https://nodejs.org/en/">nodejs官网</a>,进去下载稳定版(LTS)，安装一路next，是否安装配套依赖的时候勾上就行（不勾应该也可以，就是一堆python什么的），安装完了用cmd看看node和npm版本</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br>npm -v<br></code></pre></td></tr></table></figure><h2 id="创建github仓库"><a class="markdownIt-Anchor" href="#创建github仓库"></a> 创建github仓库</h2><p>创建仓库挺简单的，只要注意仓库名创建为<code>xxx.github.io</code>即可，xxx为GitHub用户名即可，创建完毕后博客访问就可以用 <a href="http://xxx.github.io">http://xxx.github.io</a> 了。</p><h2 id="配置ssh-key"><a class="markdownIt-Anchor" href="#配置ssh-key"></a> 配置SSH key</h2><h3 id="获取ssh-key"><a class="markdownIt-Anchor" href="#获取ssh-key"></a> 获取SSH key</h3><p>首先用git bash执行:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ssh -T <span class="hljs-symbol">git@</span>github.com<br></code></pre></td></tr></table></figure><p>显示No such file or directory则说明电脑里没有SSH，用下面的命令创建SSH:</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;邮件地址&quot;</span><br></code></pre></td></tr></table></figure><p>连续三次回车（不设置密钥），会生成两个文件，路径会显示在git上，打开那个目录用记事本打开<code>id_rsa.pub</code>文件复制全部内容到github-&gt;setting-&gt;SSh and GPG keys-&gt;New SSH key-&gt;key即可</p><h3 id="测试ssh-key配置是否成功"><a class="markdownIt-Anchor" href="#测试ssh-key配置是否成功"></a> 测试SSH key配置是否成功</h3><p>git输入:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ssh -T <span class="hljs-symbol">git@</span>github.com<br></code></pre></td></tr></table></figure><p>显示<code>Are you sure you want to continue connecting(yes/no)</code>输入yes，看到</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Hi xxx! You’ve successfully authenticated, <span class="hljs-keyword">but</span> GitHub <span class="hljs-keyword">does</span> <span class="hljs-keyword">not</span> provide shell access.<br></code></pre></td></tr></table></figure><p>表示SSH配置成功。</p><h1 id="配置hexo"><a class="markdownIt-Anchor" href="#配置hexo"></a> 配置hexo</h1><h2 id="hexo官网"><a class="markdownIt-Anchor" href="#hexo官网"></a> <a href="https://hexo.io/">hexo官网</a></h2><h2 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h2><p>由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。</p><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><p>自己在电脑里新建一个文件夹（名字无所谓），这个文件夹作为存放网站代码的地方。新建完之后将git工作目录切换到这个文件夹</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/e/</span>code<span class="hljs-regexp">/hexo/</span><br>hexo init<br></code></pre></td></tr></table></figure><p>hexo会自动下载一些文件到这个目录，如果电脑上有网络代理，这时可能会出现问题，这时需要到Windows设置里看网络代理的端口，然后在git里输入如下命令：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global http.proxy localhost:xxxx (xxxx为端口号)</span><br></code></pre></td></tr></table></figure><p>然后再init即可，记得执行完毕之后取消git的代理：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">git config --<span class="hljs-keyword">global</span> --<span class="hljs-keyword">unset</span> <span class="hljs-keyword">http</span>.proxy<br></code></pre></td></tr></table></figure><p>然后就可以开始生成博客的静态页面了</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> g <span class="hljs-comment"># 生成</span><br>hexo s <span class="hljs-comment">#启动本地预览服务</span><br></code></pre></td></tr></table></figure><p>打开浏览器访问<a href="http://localhost:4000">http://localhost:4000</a>即可看到生成的博客页面</p><h2 id="修改主题"><a class="markdownIt-Anchor" href="#修改主题"></a> 修改主题</h2><p><a href="https://hexo.io/themes/">官方主题网址</a><br>首先下载主题：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/e/</span>code<span class="hljs-regexp">/hexo/</span><br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/litten/</span>hexo-theme-yilia.git themes/yilia<br></code></pre></td></tr></table></figure><p>下载完毕后修改<code>_config.yml</code>中的<code>theme:landscape</code>为<code>theme:yilia</code>，修改完毕后重新生成一遍博客页面即可。</p><h1 id="上传到github"><a class="markdownIt-Anchor" href="#上传到github"></a> 上传到GitHub</h1><p>首先确定SSH key配置成功，然后修改<code>_config.yml</code>中的deploy</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repository:</span> git@github.com:xxx/xxx.github.io.git <span class="hljs-meta"># 你仓库的SSH地址</span><br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><p>然后用git bush输入hexo d即可上传到Github</p><h1 id="相关链接"><a class="markdownIt-Anchor" href="#相关链接"></a> 相关链接</h1><p><a href="http://blog.haoji.me/build-blog-website-by-hexo-github.html?from=xa">使用hexo+github搭建免费个人博客详细教程</a><br><a href="https://blog.csdn.net/Gfeiyv/article/details/104570075/">已解决！hexo+github搭建个人博客安装hexo时，hexo init初始化一直报错</a><br><a href="https://www.jianshu.com/p/51f7b43c162e">体验hexo+github搭建免费个人博客</a><br><a href="https://hexo.io/docs/">hexo官方文档</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>闲聊</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
